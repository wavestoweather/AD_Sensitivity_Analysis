#!/bin/bash
#SBATCH --job-name=vis_test
#SBATCH --output=logs/vis_test_%A.out
#SBATCH --error=logs/vis_test_%A.err
#SBATCH --time=0:30:00 # Should be enough time for about 30 parameters
#SBATCH -p parallel
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=32
#SBATCH --cpus-per-task=1
#SBATCH -A m2_zdvresearch
#SBATCH --mem=31000
#SBATCH -C skylake

# Usage
# sbatch vis_ensembles.job <path/to/input/data>
# ie /lustre/project/m2_zdvresearch/mahieron/data/vladiana
# This configuration used 28.70 GB RAM 
# and took 19:30 minutes for 131 convective vladiana files


module purge
# module load devel/CMake/3.15.1
# module load mpi/OpenMPI/3.1.4-GCC-8.3.0
# module load numlib/GSL/2.5-GCCcore-8.3.0
# module load data/netCDF-C++4/4.3.1-gompi-2019b
# module load devel/Boost/1.71.0-gompi-2019b

module load data/netCDF-C++4/4.3.1-gompi-2020a
module load numlib/GSL/2.6-GCC-9.3.0
module load devel/Boost/1.72.0-gompi-2020a
module load devel/CMake/3.18.4

# Store working directory to be safe
cd ..
SAVEDPWD=$(pwd)
export AD_SIM_HOME=/localscratch/${SLURM_JOB_ID}

if [ ! -f "${SAVEDPWD}/build/bin/trajectories" ] 
then 
    cd build 
    cmake .. -DNETCDF_INCLUDE_DIR=/cluster/easybuild/broadwell/software/netCDF-C++4/4.3.1-gompi-2020a/include/ -DCODIPACK_INCLUDEDIR=/home/mahieron/custom/include/ -DCMAKE_BUILD_TYPE=release -DTARGET=simulation && make -j4
    cd ..
fi

# trajectory_sensitvity_perturbance 0
# trajectory_sensitivity 1
# trajectory_perturbance 2
# grid_sensitivity 3
SIMULATION_MODE="1"
AUTO_TYPE="3"

# Write to disk every WRITE_INDEX steps. If you experience I/O issues,
# then set it to a multiple of SNAPSHOT_INDEX
# Higher values mean less stress on I/O.
# With about 20000 total time steps
# there are about 0.06136 GB per process and 1000 write_index
# in other words: 32 processes with 20000 time steps
# and a write_index of 15000 need about 29.5 GB RAM
WRITE_INDEX="15000"

TIMESTEP="20"
# Get results every SNAPSHOT_INDEX steps, in this example every $TIMESTEP (20) seconds
SNAPSHOT_INDEX="1"
# Fix pressure, temperature and ascent during microphysics (=1)
# or take any changes of them into account (=0)
FIXED_ITERATION="0"
#
SAVE_TRACK_FILE="${SAVEDPWD}/configs/qr_vis_config.json"
TRACK_FILE="${AD_SIM_HOME}/configs/qr_vis_config.json"
# Wether to take the data from the netcdf-file every 20 seconds (=1)
# or just use the initial pressure, temperature and ascent
# from the file and simulate microphysics
# until the target time is reached (=0 not recommended)
START_OVER_ENVIRONMENT="1"

# Warm up time in seconds for the model before any data is tracked
WARM_UP="1800"

SUFF="_mpi_vis_qr"
# Should set to 0 once that works
PROGRESSBAR="0"


INPUTPATH=$1
SAVE_OUTPUTPATH="/lustre/project/m2_zdvresearch/mahieron/vis_output_ensembles/"
OUTPUT_PATH="${AD_SIM_HOME}/output/"

cleanup(){
    echo "Copy from ${OUTPUT_PATH}*.nc_wcb to ${SAVE_OUTPUTPATH}*.nc_wcb"
    if [ ! -d "${SAVE_OUTPUTPATH}" ]
    then
        mkdir -p "${SAVE_OUTPUTPATH}"
    fi
    find ${OUTPUT_PATH} -type f -name "*.nc_wcb" -exec cp {} ${SAVE_OUTPUTPATH} \;
}

# Copy executable, input file, configuration file
# Create directories for temporary files, output data
if [ ! -d "${SAVE_OUTPUTPATH}" ]
then
    mkdir -p "${SAVE_OUTPUTPATH}"
fi

if [ ! -d "${AD_SIM_HOME}/build/bin/" ]
then
    mkdir -p "${AD_SIM_HOME}/build/bin/"
fi
cp ${SAVEDPWD}/build/bin/trajectories ${AD_SIM_HOME}/build/bin/

if [ ! -d "${AD_SIM_HOME}/configs" ]
then
    mkdir -p "${AD_SIM_HOME}/configs"
fi
cp ${SAVE_TRACK_FILE} ${TRACK_FILE}

if [ ! -d ${OUTPUT_PATH} ]
then
    mkdir -p ${OUTPUT_PATH}
fi

cp ${SAVEDPWD}/dmin_wetgrowth_lookup.dat ${AD_SIM_HOME}/
cd ${AD_SIM_HOME}

for INPUT_FILENAME in ${INPUTPATH}*.nc_wcb
do
    FILENAME=${INPUT_FILENAME##*/}
    FILENAME=${FILENAME%.*}

    TARGET_TIME_AFTER_START=$(ncdump -h $INPUT_FILENAME | grep -m 1 "time = " | sed 's/[^0-9]//g' )
    TARGET_TIME_AFTER_START=$(($TARGET_TIME_AFTER_START * 20 - 20))
    
    echo "Running for ${FILENAME} until ${TARGET_TIME_AFTER_START} with ${SLURM_NTASKS} tasks"
    
    mpirun -n ${SLURM_NTASKS} ${AD_SIM_HOME}/build/bin/./trajectories \
    -w ${WRITE_INDEX} \
    -a ${AUTO_TYPE} \
    -t ${FIXED_ITERATION} \
    -f ${TARGET_TIME_AFTER_START} \
    -d ${TIMESTEP} \
    -i ${SNAPSHOT_INDEX} \
    -b ${SIMULATION_MODE} \
    -o ${OUTPUT_PATH}${FILENAME}.nc \
    -e ${START_OVER_ENVIRONMENT} \
    -p ${PROGRESSBAR} \
    -g "0" \
    -l ${INPUT_FILENAME} \
    -s ${TRACK_FILE} \
    -u ${WARM_UP}

done
cleanup
wait
exit 0
