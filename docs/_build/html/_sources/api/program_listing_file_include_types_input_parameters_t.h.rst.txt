
.. _program_listing_file_include_types_input_parameters_t.h:

Program Listing for File input_parameters_t.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_types_input_parameters_t.h>` (``include/types/input_parameters_t.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <cmath>
   #include <string>
   
   // #include <boost/property_tree/ptree.hpp>
   #include <nlohmann/json.hpp>
   
   #include "include/misc/error.h"
   #include "include/types/global_args_t.h"
   
   // namespace pt = boost::property_tree;
   
   struct input_parameters_t {
       // Numerics
       double t_end_prime; 
       double dt_prime; 
       int32_t start_time_idx; 
   #ifdef MET3D
       double start_time; 
   #endif
       int snapshot_index; 
       uint64_t num_sub_steps;
   
       std::string OUTPUT_FILENAME; 
       std::string INPUT_FILENAME; 
       std::string ENS_CONFIG_FILENAME; 
       std::string CHECKPOINT_FILENAME; 
       std::string FOLDER_NAME; 
       std::string tracking_filename; 
       uint32_t id; 
       uint32_t n_ensembles;
   
       // bool start_over; /*!< Start over at new timestep of trajectory? */
       bool start_over_env; 
       bool fixed_iteration; 
       bool track_initial_cond; 
       uint32_t auto_type; 
       uint32_t traj; 
       uint32_t write_index; 
       uint64_t progress_index; 
       uint32_t ensemble; 
       double current_time; 
       double delay_time_store; 
       int simulation_mode; 
       input_parameters_t();
   
       // void put(pt::ptree &ptree, const double &time) const;
   
       // void put(pt::ptree &ptree) const;
   
       // int from_pt(pt::ptree &ptree);
   
       void set_input_from_arguments(global_args_t &arg);
   
       void print_parameters();
   
       void to_json(nlohmann::json &j, const double &time) const;
   };
   
   void to_json(nlohmann::json &j, const input_parameters_t &input);
   void from_json(const nlohmann::json &j, input_parameters_t &input);
