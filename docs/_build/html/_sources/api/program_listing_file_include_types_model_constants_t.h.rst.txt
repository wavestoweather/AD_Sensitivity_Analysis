
.. _program_listing_file_include_types_model_constants_t.h:

Program Listing for File model_constants_t.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_types_model_constants_t.h>` (``include/types/model_constants_t.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <algorithm>
   #include <fstream>
   #include <string>
   #include <vector>
   
   // #include <boost/property_tree/ptree.hpp>
   // #include <boost/property_tree/json_parser.hpp>
   #include <nlohmann/json.hpp>
   
   #include "codi.hpp"
   
   #include "include/misc/error.h"
   #include "include/types/collection_model_constants_t.h"
   #include "include/types/gamma_table_t.h"
   #include "include/types/input_parameters_t.h"
   #include "include/types/particle_model_constants_t.h"
   #include "include/microphysics/physical_parameterizations.h"
   #include "include/types/reference_quantities_t.h"
   #include "include/types/table_t.h"
   
   // namespace pt = boost::property_tree;
   
   template<class float_t>
   struct model_constants_t {
       std::string id;
       uint64_t ensemble_id;
   
       uint64_t traj_id;
   
       uint64_t max_n_trajs;
   
       uint64_t n_trajs;
   
       uint64_t n_ensembles;
   
       std::string ens_desc;
   
       //
       // Physical constants warm cloud
       //
       double alpha_d; 
       particle_model_constants_t<float_t> hail;
       particle_model_constants_t<float_t> ice;
       particle_model_constants_t<float_t> snow;
       particle_model_constants_t<float_t> cloud;
       particle_model_constants_t<float_t> rain;
       particle_model_constants_t<float_t> graupel;
   
       collection_model_constants_t<float_t> coeffs_scr;
       collection_model_constants_t<float_t> coeffs_srr;
       collection_model_constants_t<float_t> coeffs_irr;
       collection_model_constants_t<float_t> coeffs_icr;
       collection_model_constants_t<float_t> coeffs_hrr;
       collection_model_constants_t<float_t> coeffs_grr;
       collection_model_constants_t<float_t> coeffs_hcr;
       collection_model_constants_t<float_t> coeffs_gcr;
       collection_model_constants_t<float_t> coeffs_sic;
       collection_model_constants_t<float_t> coeffs_hic;
       collection_model_constants_t<float_t> coeffs_gic;
       collection_model_constants_t<float_t> coeffs_hsc;
       collection_model_constants_t<float_t> coeffs_gsc;
   
       //
       // Technical constants
       //
       double t_end_prime;       
       double t_end;             
       double dt_prime;          
       double dt;                
       double dt_traject_prime;  
       double dt_traject;        
       uint64_t num_steps;       
       uint64_t done_steps;      
       uint64_t checkpoint_steps;
       double start_time;        
       uint64_t num_sub_steps;
   
       //
       // General performance constants
       //
       double dt_half;   
       double dt_sixth;  
       double dt_third;  
       float_t a1_scale; 
       float_t a2_scale; 
       float_t e1_scale; 
       float_t e2_scale; 
       float_t d_scale;  
       const double nar = 0.22;      
       const double nbr = 2.2;       
       const double ar = M_PI / 6.0; 
       const double br = 3.0;        
       const double cr = 386.8;      
       const double dr = 0.67;       
       const double Sc = 0.6;        
       const double mu = 16.0e-6;    
       const double rho0 = 1.0;      
       const double alpha_r = 1.0/(br + 1.0 - nbr);   
       const double epsilonr = 0.5*dr + 2.5 - nbr;   
       // See constants.h for a description of those.
       std::array<float_t, static_cast<int>(Cons_idx::n_items)> constants;
   
       /*
       * Uncertainty for every parameter.
       * Currently sets everything to 10% of every parameter.
       */
       std::array<double, static_cast<uint32_t>(Cons_idx::n_items)
           + static_cast<uint32_t>(Init_cons_idx::n_items)> uncertainty;
       // std::array<float_t, static_cast<uint32_t>(Init_cons_idx::n_items)> initial_conditions;
       std::array<codi::RealForwardVec<num_par_init>, static_cast<uint32_t>(Init_cons_idx::n_items)> initial_conditions;
   
       std::vector<uint32_t> perturbed_idx;
   
       table_t<float_t> ltabdminwgg;
       gamma_table_t table_g1, table_g2, table_r1, table_r2, table_r3;
   
       int local_num_comp;
       int local_num_par;
       int local_ic_par;
   
       explicit model_constants_t(
           const std::string &tracking_filename,
           const bool &track_initial_cond);
   
       void register_input();
   
       void register_input(
           codi::RealReverse::Tape &tape);
   
       void get_gradients(
           std::vector<float_t> &y_single_new,
           std::vector< std::array<double, num_par > > &y_diff) const;
   
       void get_gradients(
           std::vector<float_t> &y_single_new,
           std::vector< std::array<double, num_par > > &y_diff,
           codi::RealReverse::Tape &tape) const;
   
       void get_gradient(
           std::array<double, num_par> &out_vec,
           std::vector<float_t> &y_single_new,
           uint32_t ii) const;
   
       // void put(pt::ptree &ptree) const;
   
       // int from_pt(pt::ptree &ptree);
   
   #if defined(RK4_ONE_MOMENT)
       void setCoefficients(
           std::vector<float_t> & y,
           reference_quantities_t& ref);
   
       void setCoefficients(
           float_t p_prime,
           float_t T_prime);
   #endif
   
       void setup_cloud_autoconversion(particle_model_constants_t<float_t> &pc);
   
       void setup_model_constants(
           const input_parameters_t &input,
           const reference_quantities_t &ref_quant);
   
       void setup_dependent_model_constants(
           const reference_quantities_t &ref_quant);
   
       void set_uncertainty();
   
       void set_dt(const double dt_prime, const reference_quantities_t &ref_quant);
   
       void print();
   
       bool trace_check(const int &idx, const int state_param) const;
   
       void load_configuration(const std::string &filename);
   
   //  private:
       uint64_t track_state;
       uint64_t track_ic;
       std::vector<uint64_t> track_param;
   
       int from_json(const nlohmann::json &j);
   };
   
   template<class float_t>
   void to_json(nlohmann::json& j, const model_constants_t<float_t>& cc);
