
.. _program_listing_file_include_types_particle_model_constants_t.h:

Program Listing for File particle_model_constants_t.h
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_types_particle_model_constants_t.h>` (``include/types/particle_model_constants_t.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <string>
   #include <vector>
   
   // #include <boost/property_tree/ptree.hpp>
   #include <nlohmann/json.hpp>
   
   #include "codi.hpp"
   
   #include "include/microphysics/constants.h"
   
   // namespace pt = boost::property_tree;
   
   template<class float_t>
   struct particle_model_constants_t{
       std::vector<float_t> constants;
       std::vector<uint32_t> perturbed_idx;
   
       /*
       * Uncertainty for every parameter related to cloud water vapor.
       * Currently sets everything to 10% of every parameter.
       */
       std::array<double, static_cast<uint32_t>(Particle_cons_idx::n_items)> uncertainty;
   
       particle_model_constants_t();
   
       void register_input(
           codi::RealReverse::Tape &tape,
           uint32_t &id);
   
       void get_gradient(
           std::array<double, num_par> &out_vec,
           uint32_t &idx,
           const bool info = false) const;
   
       // void put(pt::ptree &ptree, const std::string &type_name) const;
   
       // int from_pt(pt::ptree &ptree);
   
       void print(const std::string &title);
   
       int from_json(const nlohmann::json& j);
   };
   
   template<class float_t>
   void to_json(nlohmann::json& j, const particle_model_constants_t<float_t>& p);
