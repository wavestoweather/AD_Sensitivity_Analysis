
.. _program_listing_file_include_types_task_scheduler_t.h:

Program Listing for File task_scheduler_t.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_types_task_scheduler_t.h>` (``include/types/task_scheduler_t.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <mpi.h>
   #include <queue>
   #include <vector>
   
   #include "include/types/checkpoint_t.h"
   
   struct task_scheduler_t{
       uint64_t current_ens;
       int current_traj;
       std::queue<checkpoint_t> checkpoint_queue;
       std::vector<int> free_worker;
       std::vector<int> work_available;
   
       // std::vector<int> send_list;
   
       uint64_t max_ensemble_id;
   
       MPI_Win free_window;
       MPI_Win work_window;
       MPI_Win ens_window;
       int my_rank;
   
       task_scheduler_t(const int &rank, const int &n_processes,
           const int &simulation_mode);
   
       bool send_task(checkpoint_t &checkpoint, const bool send_to_self = true);
   
       void send_new_task(checkpoint_t &checkpoint);
   
       bool all_free();
   
       bool receive_task(checkpoint_t &checkpoint);
   
       void signal_free();
   
       void signal_work_avail();
   
       void set_n_ensembles(const int &n) {n_ensembles = n;}
       void set_n_trajectories(const int &n) {n_trajectories = n;}
   
       int get_n_ensembles() const {return n_ensembles;}
       int get_n_trajectories() const {return n_trajectories;}
       int get_n_processes() const {return n_processes;}
   
    private:
       bool static_scheduling;
       bool signal_sent;
       uint64_t n_ensembles;
       uint64_t n_trajectories;
       uint64_t n_processes;
       void signal_send_task();
   };
