import matplotlib as mpl
import numpy as np

mappings = {"lat_heat": "Latent Heating",
            "lat_cool": "Latent Cooling",
            "latent_heat": "Latent Heating",
            "latent_cool": "Latent Cooling",
            "dinv_z": r"$\partial z^{-1}$",
            "ratio_deriv": "Derivative Ratio",
            "in_param": "Input Parameter",
            "p": "Pressure",
            "T": "Temperature",
            "S": "Saturation",
            "Si": "Saturation w.r.t. Ice",
            "Q_TURBULENCE": "Mass Mixing from Turbulence",
            "qv": "Water Vapor Mixing Ratio",
            "qc": "Cloud Droplet Mixing Ratio",
            "qr": "Rain Droplet Mixing Ratio",
            "qs": "Snow Mixing Ratio",
            "qi": "Ice Mixing Ratio",
            "qg": "Graupel Mixing Ratio",
            "qh": "Hail Mixing Ratio",
            "Nv": "Water Vapor Particle Number",
            "Nc": "Cloud Droplet Particle Number",
            "Nr": "Rain Droplet Particle Number",
            "Ns": "Snow Particle Number",
            "Ni": "Ice Particle Number",
            "Ng": "Graupel Particle Number",
            "Nh": "Hail Particle Number",
            "qvout": "Precipitation of Water Vapor Mixing Ratio",
            "qcout": "Precipitation of Cloud Droplet Mixing Ratio",
            "qrout": "Precipitation of Rain Droplet Mixing Ratio",
            "qsout": "Precipitation of Snow Mixing Ratio",
            "qiout": "Precipitation of Ice Mixing Ratio",
            "qgout": "Precipitation of Graupel Mixing Ratio",
            "qhout": "Precipitation of Hail Mixing Ratio",
            "Nrout": "Precipitation of Rain Droplets",
            "Nsout": "Precipitation of Snow Crystals",
            "Niout": "Precipitation of Ice Crystals",
            "Ngout": "Precipitation of Graupel Particles",
            "Nhout": "Precipitation of Hail Particles",
            "LATITUDE": "Latitude",
            "LONGITDUE": "longitude",
            "pressure": "Pressure",
            "QV": "Water Vapor Mixing Ratio",
            "QC": "Cloud Droplet Mixing Ratio",
            "QR": "Rain Droplet Mixing Ratio",
            "QS": "Snow Mixing Ratio",
            "QI": "Ice Mixing Ratio",
            "QG": "Graupel Mixing Ratio",
            "QH": "Hail Mixing Ratio",
            "NCCLOUD": "Cloud Droplet Particle Number",
            "NCRAIN": "Rain Droplet Particle Number",
            "NCSNOW": "Snow Particle Number",
            "NCICE": "Ice Particle Number",
            "NCGRAUPEL": "Graupel Particle Number",
            "NCHAIL": "Hail Particle Number",
            "QR_IN": "sedimentation (from above) of rain droplet mixing ratio",
            "QS_IN": "sedimentation (from above) of snow crystal mixing ratio",
            "QI_IN": "sedimentation (from above) of ice crystal mixing ratio",
            "QG_IN": "sedimentation (from above) of graupel mixing ratio",
            "QR_OUT": "sedimentation of rain droplet mixing ratio",
            "QS_OUT": "sedimentation of snow crystal mixing ratio",
            "QI_OUT": "sedimentation of ice crystal mixing ratio",
            "QG_OUT": "sedimentation of graupel mixing ratio",
            "QH_OUT": "sedimentation of hail mixing ratio",
            "lat": "Latitude",
            "lon": "longitude",
            "z": "Height [m]",
            "w": "Ascend [m/s]",
            "MAP": "Flag for WCB-criterion",
            "Derivatives": "Derivatives",
            "timestep": "Time [s] after ascend begins",
            "time": "Time [s] after COSMO simulation begins",
            "time_after_ascent": "Time [s] after ascend begins",
            "step": "Simulation step",
            "dmin_x_nuc_hetero": r"$\partial x_{\mathrm{min},\mathrm{nuc},\mathrm{het}}",
            "dmin_x_nuc_homo": r"$\partial x_{\mathrm{min},\mathrm{nuc},\mathrm{hom}}",
            "dmin_x_melt": r"$\partial x_{\mathrm{min},\mathrm{melt}}",
            "dmin_x_evap": r"$\partial x_{\mathrm{min},\mathrm{evap}}",
            "dmin_x_freezing": r"$\partial x_{\mathrm{min},\mathrm{frz}}",
            "dmin_x_depo": r"$\partial x_{\mathrm{min},\mathrm{dep}}",
            "dmin_x_collision": r"$\partial x_{\mathrm{min},\mathrm{coli}}",
            "dmin_x_collection": r"$\partial x_{\mathrm{min},\mathrm{coll}}",
            "dmin_x_conversion": r"$\partial x_{\mathrm{min},\mathrm{con}}",
            "dmin_x_sedimentation": r"$\partial x_{\mathrm{min},\mathrm{sed}}",
            "dmin_x_riming": r"$\partial x_{\mathrm{min},\mathrm{rim}}"}


# A dictionary of all the derivatives where the key refers to the
# particle for which the parameter is defined. However,
# cloud parameters can affect rain droplets!
in_params_dic = {"Misc":
            ["da_1", "da_2", "de_1", "de_2", "dd", "dN_c", "dgamma",
            "dbeta_c", "dbeta_r", "ddelta1", "ddelta2", "dzeta",
            "drain_gfak", "dcloud_k_au", "dcloud_k_sc", "dkc_autocon",
            "dinv_z"],
            "Rain":
            ["drain_a_geo", "drain_b_geo", "drain_min_x", "drain_min_x_act",
            "drain_min_x_nuc_homo", "drain_min_x_nuc_hetero", "drain_min_x_melt",
            "drain_min_x_evap", "drain_min_x_freezing", "drain_min_x_depo",
            "drain_min_x_collision", "drain_min_x_collection",
            "drain_min_x_conversion", "drain_min_x_sedimentation",
            "drain_min_x_riming", "drain_max_x", "drain_sc_theta_q",
            "drain_sc_delta_q", "drain_sc_theta_n", "drain_sc_delta_n",
            "drain_s_vel", "drain_a_vel", "drain_b_vel", "drain_rho_v", "drain_c_z",
            "drain_sc_coll_n", "drain_cmu0", "drain_cmu1", "drain_cmu2", "drain_cmu3",
            "drain_cmu4", "drain_cmu5", "drain_alpha", "drain_beta", "drain_gamma",
            "drain_nu", "drain_g1", "drain_g2", "drain_mu", "drain_nm1", "drain_nm2",
            "drain_nm3", "drain_q_crit_c", "drain_d_crit_c", "drain_ecoll_c",
            "drain_cap", "drain_a_ven", "drain_b_ven", "drain_c_s", "drain_a_f",
            "drain_b_f", "drain_alfa_n", "drain_alfa_q", "drain_lambda",
            "drain_vsedi_min", "drain_vsedi_max"],
            "Cloud":
            ["dcloud_a_geo", "dcloud_b_geo", "dcloud_min_x", "dcloud_min_x_act",
            "dcloud_min_x_nuc_homo", "dcloud_min_x_nuc_hetero", "dcloud_min_x_melt",
            "dcloud_min_x_evap", "dcloud_min_x_freezing", "dcloud_min_x_depo",
            "dcloud_min_x_collision", "dcloud_min_x_collection",
            "dcloud_min_x_conversion", "dcloud_min_x_sedimentation",
            "dcloud_min_x_riming", "dcloud_max_x", "dcloud_sc_theta_q",
            "dcloud_sc_delta_q", "dcloud_sc_theta_n", "dcloud_sc_delta_n",
            "dcloud_s_vel", "dcloud_a_vel", "dcloud_b_vel", "dcloud_rho_v",
            "dcloud_c_z", "dcloud_sc_coll_n", "dcloud_cmu0", "dcloud_cmu1",
            "dcloud_cmu2", "dcloud_cmu3", "dcloud_cmu4", "dcloud_cmu5",
            "dcloud_alpha", "dcloud_beta", "dcloud_gamma", "dcloud_nu", "dcloud_g1",
            "dcloud_g2", "dcloud_mu", "dcloud_nm1", "dcloud_nm2", "dcloud_nm3",
            "dcloud_q_crit_c", "dcloud_d_crit_c", "dcloud_ecoll_c", "dcloud_cap",
            "dcloud_a_ven", "dcloud_b_ven", "dcloud_c_s", "dcloud_a_f", "dcloud_b_f",
            "dcloud_alfa_n", "dcloud_alfa_q", "dcloud_lambda", "dcloud_vsedi_min",
            "dcloud_vsedi_max"],
            "Graupel":
            ["dgraupel_a_geo", "dgraupel_b_geo", "dgraupel_min_x",
            "dgraupel_min_x_act", "dgraupel_min_x_nuc_homo",
            "dgraupel_min_x_nuc_hetero", "dgraupel_min_x_melt", "dgraupel_min_x_evap",
            "dgraupel_min_x_freezing", "dgraupel_min_x_depo",
            "dgraupel_min_x_collision", "dgraupel_min_x_collection",
            "dgraupel_min_x_conversion", "dgraupel_min_x_sedimentation",
            "dgraupel_min_x_riming", "dgraupel_max_x", "dgraupel_sc_theta_q",
            "dgraupel_sc_delta_q", "dgraupel_sc_theta_n", "dgraupel_sc_delta_n",
            "dgraupel_s_vel", "dgraupel_a_vel", "dgraupel_b_vel", "dgraupel_rho_v",
            "dgraupel_c_z", "dgraupel_sc_coll_n", "dgraupel_cmu0", "dgraupel_cmu1",
            "dgraupel_cmu2", "dgraupel_cmu3", "dgraupel_cmu4", "dgraupel_cmu5",
            "dgraupel_alpha", "dgraupel_beta", "dgraupel_gamma", "dgraupel_nu",
            "dgraupel_g1", "dgraupel_g2", "dgraupel_mu", "dgraupel_nm1",
            "dgraupel_nm2", "dgraupel_nm3", "dgraupel_q_crit_c", "dgraupel_d_crit_c",
            "dgraupel_ecoll_c", "dgraupel_cap", "dgraupel_a_ven", "dgraupel_b_ven",
            "dgraupel_c_s", "dgraupel_a_f", "dgraupel_b_f", "dgraupel_alfa_n",
            "dgraupel_alfa_q", "dgraupel_lambda", "dgraupel_vsedi_min",
            "dgraupel_vsedi_max"],
            "Hail":
            ["dhail_a_geo", "dhail_b_geo", "dhail_min_x", "dhail_min_x_act",
            "dhail_min_x_nuc_homo", "dhail_min_x_nuc_hetero", "dhail_min_x_melt",
            "dhail_min_x_evap", "dhail_min_x_freezing", "dhail_min_x_depo",
            "dhail_min_x_collision", "dhail_min_x_collection",
            "dhail_min_x_conversion", "dhail_min_x_sedimentation",
            "dhail_min_x_riming", "dhail_max_x", "dhail_sc_theta_q",
            "dhail_sc_delta_q", "dhail_sc_theta_n", "dhail_sc_delta_n", "dhail_s_vel",
            "dhail_a_vel", "dhail_b_vel", "dhail_rho_v", "dhail_c_z",
            "dhail_sc_coll_n", "dhail_cmu0", "dhail_cmu1", "dhail_cmu2", "dhail_cmu3",
            "dhail_cmu4", "dhail_cmu5", "dhail_alpha", "dhail_beta", "dhail_gamma",
            "dhail_nu", "dhail_g1", "dhail_g2", "dhail_mu", "dhail_nm1", "dhail_nm2",
            "dhail_nm3", "dhail_q_crit_c", "dhail_d_crit_c", "dhail_ecoll_c",
            "dhail_cap", "dhail_a_ven", "dhail_b_ven", "dhail_c_s", "dhail_a_f",
            "dhail_b_f", "dhail_alfa_n", "dhail_alfa_q", "dhail_lambda",
            "dhail_vsedi_min", "dhail_vsedi_max"],
            "Ice":
            ["dice_a_geo", "dice_b_geo", "dice_min_x", "dice_min_x_act",
            "dice_min_x_nuc_homo", "dice_min_x_nuc_hetero", "dice_min_x_melt",
            "dice_min_x_evap", "dice_min_x_freezing", "dice_min_x_depo",
            "dice_min_x_collision", "dice_min_x_collection", "dice_min_x_conversion",
            "dice_min_x_sedimentation", "dice_min_x_riming", "dice_max_x",
            "dice_sc_theta_q", "dice_sc_delta_q", "dice_sc_theta_n",
            "dice_sc_delta_n", "dice_s_vel", "dice_a_vel", "dice_b_vel", "dice_rho_v",
            "dice_c_z", "dice_sc_coll_n", "dice_cmu0", "dice_cmu1", "dice_cmu2",
            "dice_cmu3", "dice_cmu4", "dice_cmu5", "dice_alpha", "dice_beta",
            "dice_gamma", "dice_nu", "dice_g1", "dice_g2", "dice_mu", "dice_nm1",
            "dice_nm2", "dice_nm3", "dice_q_crit_c", "dice_d_crit_c", "dice_ecoll_c",
            "dice_cap", "dice_a_ven", "dice_b_ven", "dice_c_s", "dice_a_f",
            "dice_b_f", "dice_alfa_n", "dice_alfa_q", "dice_lambda", "dice_vsedi_min",
            "dice_vsedi_max"],
            "Snow":
            ["dsnow_a_geo", "dsnow_b_geo", "dsnow_min_x", "dsnow_min_x_act",
            "dsnow_min_x_nuc_homo", "dsnow_min_x_nuc_hetero", "dsnow_min_x_melt",
            "dsnow_min_x_evap", "dsnow_min_x_freezing", "dsnow_min_x_depo",
            "dsnow_min_x_collision", "dsnow_min_x_collection",
            "dsnow_min_x_conversion", "dsnow_min_x_sedimentation",
            "dsnow_min_x_riming", "dsnow_max_x", "dsnow_sc_theta_q",
            "dsnow_sc_delta_q", "dsnow_sc_theta_n", "dsnow_sc_delta_n", "dsnow_s_vel",
            "dsnow_a_vel", "dsnow_b_vel", "dsnow_rho_v", "dsnow_c_z",
            "dsnow_sc_coll_n", "dsnow_cmu0", "dsnow_cmu1", "dsnow_cmu2", "dsnow_cmu3",
            "dsnow_cmu4", "dsnow_cmu5", "dsnow_alpha", "dsnow_beta", "dsnow_gamma",
            "dsnow_nu", "dsnow_g1", "dsnow_g2", "dsnow_mu", "dsnow_nm1", "dsnow_nm2",
            "dsnow_nm3", "dsnow_q_crit_c", "dsnow_d_crit_c", "dsnow_ecoll_c",
            "dsnow_cap", "dsnow_a_ven", "dsnow_b_ven", "dsnow_c_s", "dsnow_a_f",
            "dsnow_b_f", "dsnow_alfa_n", "dsnow_alfa_q", "dsnow_lambda",
            "dsnow_vsedi_min", "dsnow_vsedi_max"]}

# A dictionary of physical vs non-physical parameters
in_params_phys_dic = {
    "Physical": {
        "Misc":
        [],
        "Rain":
        [],
        "Cloud":
        [],
        "Graupel":
        [],
        "Hail":
        [],
        "Ice":
        [],
        "Snow":
        []
    },
    "Non-Physical": {
        "Misc":
        [],
        "Rain":
        [],
        "Cloud":
        [],
        "Graupel":
        [],
        "Hail":
        [],
        "Ice":
        [],
        "Snow":
        []
    }
}

# A dictionary of descriptions for each parameter
in_params_descr_dic = {
    "da_1": "Dimensional coefficient used in one-moment warm physics for qc and qr calculation",
    "da_2": "Dimensional coefficient used in one-moment warm physics for qc and qr calculation",
    "de_1": "Dimensional coefficients used in one-moment warm physics for temperature calculation",
    "de_2": "Dimensional coefficients used in one-moment warm physics for temperature calculation",
    "dd": "Dimensional coefficient used in one-moment warm physics qr calculation for sedimentation",
    "dN_c": "Number concentration of cloud droplets needed for one-moment scheme",
    "dgamma": "Exponent used in one-moment warm physics for qc and qr calculation",
    "dbeta_c": "Exponent used in one-moment warm physics for qc and qr calculation",
    "dbeta_r": "Exponent used in one-moment warm physics for qc and qr calculation",
    "ddelta1": "Exponent used in one-moment warm physics for qv, qr, saturation and temperature calculation",
    "ddelta2": "Exponent used in one-moment warm physics for qv, qr, saturation and temperature calculation",
    "dzeta": "Exponents used in one-moment warm physics for qr calculation",
    "drain_gfak": "Coefficient for gamma evaluation in rain evaporation",
    "dcloud_k_au": "Coefficient for autoconversion of cloud to rain",
    "dcloud_k_sc": "Coefficient for autoconversion of cloud to rain",
    "dkc_autocon": "Kernel for autoconversion",
    "dinv_z": "Inverse of air parcel size (height) used in explicit sedimentation",
    # Rain
    "drain_a_geo": "Coefficient for diameter size calculation",
    "drain_b_geo": "Exponent for diameter size calculation",
    "drain_min_x": "Minimum size of the particle used in one-moment schemes",
    "drain_min_x_act": "Not used",
    "drain_min_x_nuc_homo": "Not used",
    "drain_min_x_nuc_hetero": "Not used",
    "drain_min_x_melt": "Not used",
    "drain_min_x_evap": "Minimum size of particle for evaporation",
    "drain_min_x_freezing": "Minimum size of particle for freezing",
    "drain_min_x_depo": "Not used",
    "drain_min_x_collision": "Not used",
    "drain_min_x_collection": "Minimum size of particle for different collision processes",
    "drain_min_x_conversion": "Not used",
    "drain_min_x_sedimentation": "Minimum size of particle for sedimentation",
    "drain_min_x_riming": "Minimum size of particle for riming",
    "drain_max_x": "Maximum size of particle",
    "drain_sc_theta_q": "Not used",
    "drain_sc_delta_q": "Not used",
    "drain_sc_theta_n": "Not used",
    "drain_sc_delta_n": "Not used",
    "drain_s_vel": "Not used",
    "drain_a_vel": "Coefficient for particle velocity",
    "drain_b_vel": "Exponent for particle velocity",
    "drain_rho_v": "Coefficient used in density correction for the increased terminal fall velocity with decreasing air density",
    "drain_c_z": "Coefficient for 2nd mass moment",
    "drain_sc_coll_n": "Not used",
    "drain_cmu0": r"Coefficient for calculating the shape parameter $\mu$",
    "drain_cmu1": r"Coefficient for calculating the shape parameter $\mu$",
    "drain_cmu2": r"Coefficient for calculating the shape parameter $\mu$",
    "drain_cmu3": r"Constant for calculating the shape parameter $\mu$",
    "drain_cmu4": r"Constant for calculating the shape parameter $\mu$",
    "drain_cmu5": r"Exponent for calculating the shape parameter $\mu$",
    "drain_alpha": "Constant in rain sedimentation",
    "drain_beta": "Coefficient for rain sedimentation",
    "drain_gamma": "Exponent for rain sedimentation",
    "drain_nu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "drain_g1": r"Right edge of incomplete gamma function,  which had been initialized with $\text{nm}_1$",
    "drain_g2": r"Right edge of incomplete gamma function,  which had been initialized with $\text{nm}_2$",
    "drain_mu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "drain_nm1": "Number of bins of the incomplete gamma function lookup table 1",
    "drain_nm2": "Number of bins of the incomplete gamma function lookup table 2",
    "drain_nm3": "Number of bins of the incomplete gamma function lookup table 3",
    "drain_q_crit_c": "Not used",
    "drain_d_crit_c": "Not used",
    "drain_ecoll_c": "Not used",
    "drain_cap": "Coefficient for capacity of particle",
    "drain_a_ven": "Not used",
    "drain_b_ven": "Not used",
    "drain_c_s": "Inverse of capacity. Coefficient in evaporation and vapor deposition",
    "drain_a_f": "Constant for average ventilation. Used in melting and ice-vapor processes.",
    "drain_b_f": "Coefficient for average ventilation",
    "drain_alfa_n": "Not used",
    "drain_alfa_q": "Not used",
    "drain_lambda": "Not used",
    "drain_vsedi_min": "Not used",
    "drain_vsedi_max": "Not used",
    # Cloud
    "dcloud_a_geo": "Coefficient for diameter size calculation",
    "dcloud_b_geo": "Exponent for diameter size calculation",
    "dcloud_min_x": "Minimum size of the particle used in one-moment schemes",
    "dcloud_min_x_act": "Minimum size of particle for",
    "dcloud_min_x_nuc_homo": "Not used",
    "dcloud_min_x_nuc_hetero": "Not used",
    "dcloud_min_x_melt": "Not used",
    "dcloud_min_x_evap": "Not used",
    "dcloud_min_x_freezing": "Minimum size of particle for freezing",
    "dcloud_min_x_depo": "Not used",
    "dcloud_min_x_collision": "Not used",
    "dcloud_min_x_collection": "Not used",
    "dcloud_min_x_conversion": "Minimum size of particle for conversion processes",
    "dcloud_min_x_sedimentation": "Not used",
    "dcloud_min_x_riming": "Minimum size of particle for riming",
    "dcloud_max_x": "Maximum size of particle",
    "dcloud_sc_theta_q": "Not used",
    "dcloud_sc_delta_q": "Not used",
    "dcloud_sc_theta_n": "Not used",
    "dcloud_sc_delta_n": "Not used",
    "dcloud_s_vel": "Not used",
    "dcloud_a_vel": "Coefficient for particle velocity",
    "dcloud_b_vel": "Exponent for particle velocity",
    "dcloud_rho_v": "Coefficient used in density correction for the increased terminal fall velocity with decreasing air density",
    "dcloud_c_z": "Coefficient for 2nd mass moment",
    "dcloud_sc_coll_n": "Not used",
    "dcloud_cmu0": "Not used",
    "dcloud_cmu1": "Not used",
    "dcloud_cmu2": "Not used",
    "dcloud_cmu3": "Not used",
    "dcloud_cmu4": "Not used",
    "dcloud_cmu5": "Not used",
    "dcloud_alpha": "Not used",
    "dcloud_beta": "Not used",
    "dcloud_gamma": "Not used",
    "dcloud_nu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dcloud_g1": "Not used",
    "dcloud_g2": "Not used",
    "dcloud_mu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dcloud_nm1": "Not used",
    "dcloud_nm2": "Not used",
    "dcloud_nm3": "Not used",
    "dcloud_q_crit_c": "Not used",
    "dcloud_d_crit_c": "Not used",
    "dcloud_ecoll_c": "Not used",
    "dcloud_cap": "Coefficient for capacity of particle",
    "dcloud_a_ven": "Not used",
    "dcloud_b_ven": "Not used",
    "dcloud_c_s": "Inverse of capacity. Coefficient in evaporation and vapor deposition",
    "dcloud_a_f": "Constant for average ventilation. Used in melting and ice-vapor processes.",
    "dcloud_b_f": "Coefficient for average ventilation",
    "dcloud_alfa_n": "Not used",
    "dcloud_alfa_q": "Not used",
    "dcloud_lambda": "Not used",
    "dcloud_vsedi_min": "Not used",
    "dcloud_vsedi_max": "Not used",
    # Graupel
    "dgraupel_a_geo": "Coefficient for diameter size calculation",
    "dgraupel_b_geo": "Exponent for diameter size calculation",
    "dgraupel_min_x": "Minimum size of the particle used in one-moment schemes",
    "dgraupel_min_x_act": "Not used",
    "dgraupel_min_x_nuc_homo": "Not used",
    "dgraupel_min_x_nuc_hetero": "Not used",
    "dgraupel_min_x_melt": "Minimum size of particle for melting",
    "dgraupel_min_x_evap": "Minimum size of particle for evaporation",
    "dgraupel_min_x_freezing": "Not used",
    "dgraupel_min_x_depo": "Minimum size of particle for vapor deposition",
    "dgraupel_min_x_collision": "Not used",
    "dgraupel_min_x_collection": "Minimum size of particle for different collision processes",
    "dgraupel_min_x_conversion": "Minimum size of particle for conversion processes",
    "dgraupel_min_x_sedimentation": "Minimum size of particle for sedimentation",
    "dgraupel_min_x_riming": "Minimum size of particle for riming",
    "dgraupel_max_x": "Maximum size of particle",
    "dgraupel_sc_theta_q": "Not used",
    "dgraupel_sc_delta_q": "Not used",
    "dgraupel_sc_theta_n": "Not used",
    "dgraupel_sc_delta_n": "Not used",
    "dgraupel_s_vel": "Variance for the assumed Gaussian velocity distributions used in collection and riming processes",
    "dgraupel_a_vel": "Coefficient for particle velocity",
    "dgraupel_b_vel": "Exponent for particle velocity",
    "dgraupel_rho_v": "Coefficient used in density correction for the increased terminal fall velocity with decreasing air density",
    "dgraupel_c_z": "Coefficient for 2nd mass moment",
    "dgraupel_sc_coll_n": "Coefficient in graupel self collection and cloud riming",
    "dgraupel_cmu0": "Not used",
    "dgraupel_cmu1": "Not used",
    "dgraupel_cmu2": "Not used",
    "dgraupel_cmu3": "Not used",
    "dgraupel_cmu4": "Not used",
    "dgraupel_cmu5": "Not used",
    "dgraupel_alpha": "Not used",
    "dgraupel_beta": "Not used",
    "dgraupel_gamma": "Not used",
    "dgraupel_nu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dgraupel_g1": r"Right edge of incomplete gamma function,  which had been initialized with $\text{nm}_1$",
    "dgraupel_g2": r"Right edge of incomplete gamma function,  which had been initialized with $\text{nm}_2$",
    "dgraupel_mu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dgraupel_nm1": "Number of bins of the incomplete gamma function lookup table 1",
    "dgraupel_nm2": "Number of bins of the incomplete gamma function lookup table 2",
    "dgraupel_nm3": "Not used",
    "dgraupel_q_crit_c": "Riming parameter",
    "dgraupel_d_crit_c": "Riming parameter",
    "dgraupel_ecoll_c": "Riming coefficient. Maximum collision efficiency with cloud droplets",
    "dgraupel_cap": "Coefficient for capacity of particle",
    "dgraupel_a_ven": "Vapor deposition coefficient",
    "dgraupel_b_ven": "Not used",
    "dgraupel_c_s": "Inverse of capacity. Coefficient in evaporation and vapor deposition",
    "dgraupel_a_f": "Constant for average ventilation. Used in melting and ice-vapor processes.",
    "dgraupel_b_f": "Coefficient for average ventilation",
    "dgraupel_alfa_n": "Sedimentation velocity coefficient",
    "dgraupel_alfa_q": "Sedimentation velocity coefficient",
    "dgraupel_lambda": "Sedimentation velocity coefficient",
    "dgraupel_vsedi_min": "Minimum sedimentation velocity parameter",
    "dgraupel_vsedi_max": "Maximum sedimentation velocity parameter",
    # Hail
    "dhail_a_geo": "Coefficient for diameter size calculation",
    "dhail_b_geo": "Exponent for diameter size calculation",
    "dhail_min_x": "Minimum size of the particle used in one-moment schemes",
    "dhail_min_x_act": "Not used",
    "dhail_min_x_nuc_homo": "Not used",
    "dhail_min_x_nuc_hetero": "Not used",
    "dhail_min_x_melt": "Minimum size of particle for melting",
    "dhail_min_x_evap": "Not used",
    "dhail_min_x_freezing": "Not used",
    "dhail_min_x_depo": "Minimum size of particle for vapor deposition",
    "dhail_min_x_collision": "Not used",
    "dhail_min_x_collection": "Not used",
    "dhail_min_x_conversion": "Not used",
    "dhail_min_x_sedimentation": "Minimum size of particle for sedimentation",
    "dhail_min_x_riming": "Minimum size of particle for riming",
    "dhail_max_x": "Maximum size of particle",
    "dhail_sc_theta_q": "Not used",
    "dhail_sc_delta_q": "Not used",
    "dhail_sc_theta_n": "Not used",
    "dhail_sc_delta_n": "Not used",
    "dhail_s_vel": "Variance for the assumed Gaussian velocity distributions used in collection and riming processes",
    "dhail_a_vel": "Coefficient for particle velocity",
    "dhail_b_vel": "Exponent for particle velocity",
    "dhail_rho_v": "Coefficient used in density correction for the increased terminal fall velocity with decreasing air density",
    "dhail_c_z": "Coefficient for 2nd mass moment",
    "dhail_sc_coll_n": "Coefficient in graupel self collection and cloud riming",
    "dhail_cmu0": "Not used",
    "dhail_cmu1": "Not used",
    "dhail_cmu2": "Not used",
    "dhail_cmu3": "Not used",
    "dhail_cmu4": "Not used",
    "dhail_cmu5": "Not used",
    "dhail_alpha": "Not used",
    "dhail_beta": "Not used",
    "dhail_gamma": "Not used",
    "dhail_nu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dhail_g1": "Not used",
    "dhail_g2": "Not used",
    "dhail_mu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dhail_nm1": "Not used",
    "dhail_nm2": "Not used",
    "dhail_nm3": "Not used",
    "dhail_q_crit_c": "Riming parameter",
    "dhail_d_crit_c": "Riming parameter",
    "dhail_ecoll_c": "Riming coefficient. Maximum collision efficiency with cloud droplets",
    "dhail_cap": "Coefficient for capacity of particle",
    "dhail_a_ven": "Vapor deposition coefficient",
    "dhail_b_ven": "Not used",
    "dhail_c_s": "Inverse of capacity. Coefficient in evaporation and vapor deposition",
    "dhail_a_f": "Constant for average ventilation. Used in melting and ice-vapor processes.",
    "dhail_b_f": "Coefficient for average ventilation",
    "dhail_alfa_n": "Sedimentation velocity coefficient",
    "dhail_alfa_q": "Sedimentation velocity coefficient",
    "dhail_lambda": "Sedimentation velocity coefficient",
    "dhail_vsedi_min": "Minimum sedimentation velocity parameter",
    "dhail_vsedi_max": "Maximum sedimentation velocity parameter",
    # Ice
    "dice_a_geo": "Coefficient for diameter size calculation",
    "dice_b_geo": "Exponent for diameter size calculation",
    "dice_min_x": "Minimum size of the particle used in one-moment schemes",
    "dice_min_x_act": "Minimum size of particle for ice activation",
    "dice_min_x_nuc_homo": "Minimum size of particle for homogenous nucleation",
    "dice_min_x_nuc_hetero": "Minimum size of particle for heterogeneous nucleation",
    "dice_min_x_melt": "Minimum size of particle for melting",
    "dice_min_x_evap": "Minimum size of particle for evaporation",
    "dice_min_x_freezing": "Not used",
    "dice_min_x_depo": "Minimum size of particle for vapor deposition",
    "dice_min_x_collision": "Minimum size of particle for ice-ice collision",
    "dice_min_x_collection": "Minimum size of particle for different collision processes",
    "dice_min_x_conversion": "Minimum size of particle for conversion processes",
    "dice_min_x_sedimentation": "Minimum size of particle for sedimentation",
    "dice_min_x_riming": "Minimum size of particle for riming",
    "dice_max_x": "Maximum size of particle",
    "dice_sc_theta_q": "Not used",
    "dice_sc_delta_q": "Not used",
    "dice_sc_theta_n": "Coefficient for collision particle number",
    "dice_sc_delta_n": "Coefficient for collision particle number",
    "dice_s_vel": "Variance for the assumed Gaussian velocity distributions used in collection and riming processes",
    "dice_a_vel": "Coefficient for particle velocity",
    "dice_b_vel": "Exponent for particle velocity",
    "dice_rho_v": "Coefficient used in density correction for the increased terminal fall velocity with decreasing air density",
    "dice_c_z": "Coefficient for 2nd mass moment",
    "dice_sc_coll_n": "Coefficient in graupel self collection and cloud riming",
    "dice_cmu0": "Not used",
    "dice_cmu1": "Not used",
    "dice_cmu2": "Not used",
    "dice_cmu3": "Not used",
    "dice_cmu4": "Not used",
    "dice_cmu5": "Not used",
    "dice_alpha": "Not used",
    "dice_beta": "Not used",
    "dice_gamma": "Not used",
    "dice_nu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dice_g1": "Not used",
    "dice_g2": "Not used",
    "dice_mu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dice_nm1": "Not used",
    "dice_nm2": "Not used",
    "dice_nm3": "Not used",
    "dice_q_crit_c": "Riming parameter",
    "dice_d_crit_c": "Riming parameter",
    "dice_ecoll_c": "Riming coefficient. Maximum collision efficiency with cloud droplets",
    "dice_cap": "Coefficient for capacity of particle",
    "dice_a_ven": "Vapor deposition coefficient",
    "dice_b_ven": "Not used",
    "dice_c_s": "Inverse of capacity. Coefficient in evaporation and vapor deposition",
    "dice_a_f": "Constant for average ventilation. Used in melting and ice-vapor processes.",
    "dice_b_f": "Coefficient for average ventilation",
    "dice_alfa_n": "Sedimentation velocity coefficient",
    "dice_alfa_q": "Sedimentation velocity coefficient",
    "dice_lambda": "Sedimentation velocity coefficient",
    "dice_vsedi_min": "Minimum sedimentation velocity parameter",
    "dice_vsedi_max": "Maximum sedimentation velocity parameter",
    # Snow
    "dsnow_a_geo": "Coefficient for diameter size calculation",
    "dsnow_b_geo": "Exponent for diameter size calculation",
    "dsnow_min_x": "Minimum size of the particle used in one-moment schemes",
    "dsnow_min_x_act": "Not used",
    "dsnow_min_x_nuc_homo": "Not used",
    "dsnow_min_x_nuc_hetero": "Not used",
    "dsnow_min_x_melt": "Minimum size of particle for melting",
    "dsnow_min_x_evap": "Minimum size of particle for evaporation",
    "dsnow_min_x_freezing": "Not used",
    "dsnow_min_x_depo": "Minimum size of particle for vapor deposition",
    "dsnow_min_x_collision": "Not used",
    "dsnow_min_x_collection": "Minimum size of particle for different collision processes",
    "dsnow_min_x_conversion": "Not used",
    "dsnow_min_x_sedimentation": "Minimum size of particle for sedimentation",
    "dsnow_min_x_riming": "Minimum size of particle for riming",
    "dsnow_max_x": "Maximum size of particle",
    "dsnow_sc_theta_q": "Not used",
    "dsnow_sc_delta_q": "Not used",
    "dsnow_sc_theta_n": "Coefficient for collision particle number",
    "dsnow_sc_delta_n": "Coefficient for collision particle number",
    "dsnow_s_vel": "Variance for the assumed Gaussian velocity distributions used in collection and riming processes",
    "dsnow_a_vel": "Coefficient for particle velocity",
    "dsnow_b_vel": "Exponent for particle velocity",
    "dsnow_rho_v": "Coefficient used in density correction for the increased terminal fall velocity with decreasing air density",
    "dsnow_c_z": "Coefficient for 2nd mass moment",
    "dsnow_sc_coll_n": "Coefficient in graupel self collection and cloud riming",
    "dsnow_cmu0": "Not used",
    "dsnow_cmu1": "Not used",
    "dsnow_cmu2": "Not used",
    "dsnow_cmu3": "Not used",
    "dsnow_cmu4": "Not used",
    "dsnow_cmu5": "Not used",
    "dsnow_alpha": "Not used",
    "dsnow_beta": "Not used",
    "dsnow_gamma": "Not used",
    "dsnow_nu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dsnow_g1": "Not used",
    "dsnow_g2": "Not used",
    "dsnow_mu": r"Shape parameter of the generalized $\Gamma$-distribution",
    "dsnow_nm1": "Not used",
    "dsnow_nm2": "Not used",
    "dsnow_nm3": "Not used",
    "dsnow_q_crit_c": "Riming parameter",
    "dsnow_d_crit_c": "Riming parameter",
    "dsnow_ecoll_c": "Riming coefficient. Maximum collision efficiency with cloud droplets",
    "dsnow_cap": "Coefficient for capacity of particle",
    "dsnow_a_ven": "Vapor deposition coefficient",
    "dsnow_b_ven": "Not used",
    "dsnow_c_s": "Inverse of capacity. Coefficient in evaporation and vapor deposition",
    "dsnow_a_f": "Constant for average ventilation. Used in melting and ice-vapor processes.",
    "dsnow_b_f": "Coefficient for average ventilation",
    "dsnow_alfa_n": "Sedimentation velocity coefficient",
    "dsnow_alfa_q": "Sedimentation velocity coefficient",
    "dsnow_lambda": "Sedimentation velocity coefficient",
    "dsnow_vsedi_min": "Minimum sedimentation velocity parameter",
    "dsnow_vsedi_max": "Maximum sedimentation velocity parameter"}


def parse_word(word):
    """
    Parse a name of a derivative and return it in a latex conform type.

    Parameters
    ----------
    word : string
        Word to parse.

    Returns
    -------
    string
        String to use with latex. If a formula has been detected, '$' will
        be added.
    """
    subscript_no_math = ["snow", "graupel", "rain", "ice", "cloud", "hail", "vapor"]
    no_math = ["geo", "min", "max", "ven", "vel"]
    math_keys = ["alpha", "gamma", "beta", "delta", "zeta",
                 "rho", "nu", "mu", "lambda", "theta"]
    long_words = {
        "freezing": "frz",
        "collection": "coll",
        "collision": "coli",
        "sedimentation": "sed",
        "conversion": "con",
        "deposition": "dep",
        "homogenous": "hom",
        "heterogenous": "het"
    }

    maps = mappings.keys()
    for w in maps:
        if word == w:
            return mappings[word]
    for l in long_words:
        if l in word:
            word = word.replace(l, long_words[l])
    # The first "d" shall be a derivative symbol
    word = r"\partial " + word[1::]

    word = word.replace("delta_", "delta ")
    # Check for this typo
    word = word.replace("alfa", "alpha")
    # if any of words is in there, make it to subscript
    for w in subscript_no_math:
        if w in word:
            parts = word.split(" ")
            start = parts[0]
            parts = parts[1].split("_")
            if len(parts) == 4:
                word = (start + " "
                        + parts[2] + r"_{"
                        + parts[1] + r", \mathrm{"
                        + parts[0] + r","
                        + parts[3] + r"}}")

            elif len(parts) == 3:
                word = (start + " "
                        + parts[2] + r"_{"
                        + parts[1] + r", \mathrm{"
                        + parts[0] + r"}}")
            else:
                word = (start + " "
                        + parts[1] + r"_{"
                        + r"\mathrm{"
                        + parts[0] + r"}}")

            break
    word = r"$" + word + r" $"
    for w in no_math:
        word = word.replace(w, r"\mathrm{" + w + r"}")
    for w in math_keys:
        word = word.replace(w, "\\" + w )
    if "nuc" in word:
        word = word.replace("\\nuc", "nuc")
    return word

# A dictionary of used values for each parameter
in_params_value_dic = {
    "da_1": 1.0e-3,
    "da_2": r"$ 1.72 / (R_a^{7/8}) $",
    "de_1": r"$ 1 / \sqrt{R_a} $",
    "de_2": r"$ 9.1 / R_a^{11/16} $",
    "dd": "see Equation ..",
    "dN_c": 50,
    "dgamma": 1,
    "dbeta_c": 1,
    "dbeta_r": 7.0/8.0,
    "ddelta1": 0.5,
    "ddelta2": 11.0/16.0,
    "dzeta": 9.0/8.0,
    "drain_gfak": 1,
    "dcloud_k_au": " see Equation .. ",
    "dcloud_k_sc": " see Equation .. ",
    "dkc_autocon": 9.44e9,
    "dinv_z": 1.0/250.0,
    # Cloud
    "dcloud_nu": 1,
    "dcloud_mu": 1,
    "dcloud_max_x": 2.6e-10,
    "dcloud_min_x": 4.2e-15,
    "dcloud_min_x_act": 4.2e-15,
    "dcloud_min_x_nuc_homo": 4.2e-15,
    "dcloud_min_x_nuc_hetero": 4.2e-15,
    "dcloud_min_x_melt": 4.2e-15,
    "dcloud_min_x_evap": 4.2e-15,
    "dcloud_min_x_freezing": 4.2e-15,
    "dcloud_min_x_depo": 4.2e-15,
    "dcloud_min_x_collision": 4.2e-15,
    "dcloud_min_x_collection": 4.2e-15,
    "dcloud_min_x_conversion": 4.2e-15,
    "dcloud_min_x_sedimentation": 4.2e-15,
    "dcloud_min_x_riming": 4.2e-15,
    "dcloud_a_geo": 1.24e-1,
    "dcloud_b_geo": 0.333333,
    "dcloud_a_vel": 3.75e5,
    "dcloud_b_vel": 0.666667,
    "dcloud_a_ven": 0.78,
    "dcloud_b_ven": 0.308,
    "dcloud_cap": 2.0,
    "dcloud_vsedi_max": 1.0,
    "dcloud_vsedi_min": 0.0,
    "dcloud_c_s": r"$1/" + parse_word("dcloud_cap")[1::],
    "dcloud_a_f": "see Equation ..",
    "dcloud_b_f": "see Equation ..",
    "dcloud_c_z": "see Equation ..",
    "dcloud_rho_v": "see Equation ..",
    # Rain
    "drain_nu": -2.0/3.0, # SB: -2/3 COSMO: 0.0
    "drain_mu": 1.0/3.0, # SB: 1/3 COMSO: 1.0/3.0
    "drain_max_x": 3.0e-6,
    "drain_min_x": 2.6e-10,
    "drain_min_x_act": 2.6e-10,
    "drain_min_x_nuc_homo": 2.6e-10,
    "drain_min_x_nuc_hetero": 2.6e-10,
    "drain_min_x_melt": 2.6e-10,
    "drain_min_x_evap": 2.6e-10,
    "drain_min_x_freezing": 2.6e-10,
    "drain_min_x_depo": 2.6e-10,
    "drain_min_x_collision": 2.6e-10,
    "drain_min_x_collection": 2.6e-10,
    "drain_min_x_conversion": 2.6e-10,
    "drain_min_x_sedimentation": 2.6e-10,
    "drain_min_x_riming": 2.6e-10,
    "drain_a_geo": 1.24e-1,
    "drain_b_geo": 0.333333,
    "drain_a_vel": 114.0137,
    "drain_b_vel": 0.234370,
    "drain_cap": 2.0,
    "drain_alpha": 9.292,
    "drain_beta": 9.623,
    "drain_gamma": 6.222e2,
    "drain_cmu0": 6.0,
    "drain_cmu1": 3.0e1,
    "drain_cmu2": 1.0e3,
    "drain_cmu3": 1.1e-3,
    "drain_cmu4": 1.0,
    "drain_cmu5": 2.0,
    "drain_gfak": 1_0,
    "drain_vsedi_max": 20.0,
    "drain_vsedi_min": 0.1,
    "drain_c_s": r"$1/" + parse_word("drain_cap")[1::],
    "drain_a_f": "see Equation ..",
    "drain_b_f": "see Equation ..",
    "drain_c_z": "see Equation ..",
    "drain_nm1": "see Equation ..",
    "drain_nm2": "see Equation ..",
    "drain_nm3": "see Equation ..",
    "drain_g1": 1,
    "drain_g2": 6,
    "drain_rho_v": "see Equation ..",
    # Graupel
    "dgraupel_nu": 1.0, # SB
    "dgraupel_mu": 1.0/3.0, # SB
    "dgraupel_max_x": 5.0e-4,
    "dgraupel_min_x": 1.0e-9,
    "dgraupel_min_x_act": 1.0e-9,
    "dgraupel_min_x_nuc_homo": 1.0e-9,
    "dgraupel_min_x_nuc_hetero": 1.0e-9,
    "dgraupel_min_x_melt": 1.0e-9,
    "dgraupel_min_x_evap": 1.0e-9,
    "dgraupel_min_x_freezing": 1.0e-9,
    "dgraupel_min_x_depo": 1.0e-9,
    "dgraupel_min_x_collision": 1.0e-9,
    "dgraupel_min_x_collection": 1.0e-9,
    "dgraupel_min_x_conversion": 1.0e-9,
    "dgraupel_min_x_sedimentation": 1.0e-9,
    "dgraupel_min_x_riming": 1.0e-9,
    "dgraupel_a_geo": 1.42e-1,
    "dgraupel_b_geo": 0.314,
    "dgraupel_a_vel": 86.89371,
    "dgraupel_b_vel": 0.268325,
    "dgraupel_a_ven": 0.78,
    "dgraupel_b_ven": 0.308,
    "dgraupel_cap": 2.0,
    "dgraupel_vsedi_max": 30.0,
    "dgraupel_vsedi_min": 0.1,
    "dgraupel_d_crit_c": 100.0e-6,
    "dgraupel_q_crit_c": 1.0e-6,
    "dgraupel_s_vel": 0.0,
    "dgraupel_ecoll_c": 1.0,
    "dgraupel_c_s": r"$1/" + parse_word("dgraupel_cap")[1::],
    "dgraupel_nm1": "see Equation ..",
    "dgraupel_nm2": "see Equation ..",
    "dgraupel_a_f": "see Equation ..",
    "dgraupel_b_f": "see Equation ..",
    "dgraupel_c_z": "see Equation ..",
    "dgraupel_sc_coll_n": "see Equation ..",
    "dgraupel_g1": 120,
    "dgraupel_g2": 40320,
    "dgraupel_lambda": "see Equation ..",
    "dgraupel_alfa_n": "see Equation ..",
    "dgraupel_alfa_q": "see Equation ..",
    "dgraupel_rho_v": "see Equation ..",
    # Hail
    "dhail_nu": 1.0,
    "dhail_mu": 1.0/3.0,
    "dhail_max_x": 5.0e-4,
    "dhail_min_x": 2.6e-9,
    "dhail_min_x_act": 2.6e-9,
    "dhail_min_x_nuc_homo": 2.6e-9,
    "dhail_min_x_nuc_hetero": 2.6e-9,
    "dhail_min_x_melt": 2.6e-9,
    "dhail_min_x_evap": 2.6e-9,
    "dhail_min_x_freezing": 2.6e-9,
    "dhail_min_x_depo": 2.6e-9,
    "dhail_min_x_collision": 2.6e-9,
    "dhail_min_x_collection": 2.6e-9,
    "dhail_min_x_conversion": 2.6e-9,
    "dhail_min_x_sedimentation": 2.6e-9,
    "dhail_min_x_riming": 2.6e-9,
    "dhail_a_geo": 0.1366,
    "dhail_b_geo": 1.0/3.0,
    "dhail_a_vel": 39.3,
    "dhail_b_vel": 0.166667,
    "dhail_a_ven": 0.78,
    "dhail_b_ven": 0.308,
    "dhail_cap": 2.0,
    "dhail_vsedi_max": 30.0,
    "dhail_vsedi_min": 0.1,
    "dhail_sc_coll_n": 1.0,
    "dhail_d_crit_c": 100.0e-6,
    "dhail_q_crit_c": 1.0e-6,
    "dhail_s_vel": 0.0,
    "dhail_ecoll_c": 1.0,
    "dhail_c_s": r"$1/" + parse_word("dhail_cap")[1::],
    "dhail_a_f": "see Equation ..",
    "dhail_b_f": "see Equation ..",
    "dhail_c_z": "see Equation ..",
    "dhail_lambda": "see Equation ..",
    "dhail_alfa_n": "see Equation ..",
    "dhail_alfa_q": "see Equation ..",
    "dhail_rho_v": "see Equation ..",
    # Ice
    "dice_nu": 1.0,
    "dice_mu": 1.0/3.0,
    "dice_max_x": 1.0e-5,
    "dice_min_x": 1.0e-12,
    "dice_min_x_act": 1.0e-12,
    "dice_min_x_nuc_homo": 1.0e-12,
    "dice_min_x_nuc_hetero": 1.0e-12,
    "dice_min_x_melt": 1.0e-12,
    "dice_min_x_evap": 1.0e-12,
    "dice_min_x_freezing": 1.0e-12,
    "dice_min_x_depo": 1.0e-12,
    "dice_min_x_collision": 1.0e-12,
    "dice_min_x_collection": 1.0e-12,
    "dice_min_x_conversion": 1.0e-12,
    "dice_min_x_sedimentation": 1.0e-12,
    "dice_min_x_riming": 1.0e-12,
    "dice_a_geo": 0.835,
    "dice_b_geo": 0.39,
    "dice_a_vel": 2.77e1,
    "dice_b_vel": 0.21579,
    "dice_a_ven": 0.78,
    "dice_b_ven": 0.308,
    "dice_cap": 2.0,
    "dice_vsedi_max": 3.0,
    "dice_vsedi_min": 0.0,
    "dice_sc_coll_n": 0.8,
    "dice_d_crit_c": 150.0e-6,
    "dice_q_crit_c": 1.0e-5,
    "dice_s_vel": 0.05,
    "dice_ecoll_c": 0.80,
    "dice_c_s": r"$1/" + parse_word("dice_cap")[1::],
    "dice_a_f": "see Equation ..",
    "dice_b_f": "see Equation ..",
    "dice_c_z": "see Equation ..",
    "dice_sc_delta_n": "see Equation ..",
    "dice_sc_delta_q": "see Equation ..",
    "dice_sc_theta_n": "see Equation ..",
    "dice_sc_theta_q": "see Equation ..",
    "dice_lambda": "see Equation ..",
    "dice_alfa_n": "see Equation ..",
    "dice_alfa_q": "see Equation ..",
    "dice_rho_v": "see Equation ..",
    # Snow
    "dsnow_nu": 1.0, # COSMO: 0.0, SB 1.0
    "dsnow_mu": 1.0/3.0, # COSMO 0.5, SB: 1.0/3.0
    "dsnow_max_x": 2.0e-5,
    "dsnow_min_x": 1.0e-10,
    "dsnow_min_x_act": 1.0e-10,
    "dsnow_min_x_nuc_homo": 1.0e-10,
    "dsnow_min_x_nuc_hetero": 1.0e-10,
    "dsnow_min_x_melt": 1.0e-10,
    "dsnow_min_x_evap": 1.0e-10,
    "dsnow_min_x_freezing": 1.0e-10,
    "dsnow_min_x_depo": 1.0e-10,
    "dsnow_min_x_collision": 1.0e-10,
    "dsnow_min_x_collection": 1.0e-10,
    "dsnow_min_x_conversion": 1.0e-10,
    "dsnow_min_x_sedimentation": 1.0e-10,
    "dsnow_min_x_riming": 1.0e-10,
    "dsnow_a_geo": 2.4,
    "dsnow_b_geo": 0.455,
    "dsnow_a_vel": 8.8,
    "dsnow_b_vel": 0.15,
    "dsnow_a_ven": 0.78,
    "dsnow_b_ven": 0.308,
    "dsnow_cap": 2.0,
    "dsnow_vsedi_max": 3.0,
    "dsnow_vsedi_min": 0.1,
    "dsnow_sc_coll_n": 0.8,
    "dsnow_d_crit_c": 150.0e-6,
    "dsnow_q_crit_c": 1.0e-5,
    "dsnow_s_vel": 0.25,
    "dsnow_ecoll_c": 0.80,
    "dsnow_c_s": r"$1/" + parse_word("dsnow_cap")[1::],
    "dsnow_a_f": "see Equation ..",
    "dsnow_b_f": "see Equation ..",
    "dsnow_c_z": "see Equation ..",
    "dsnow_sc_delta_n": "see Equation ..",
    "dsnow_sc_theta_n": "see Equation ..",
    "dsnow_lambda": "see Equation ..",
    "dsnow_alfa_n": "see Equation ..",
    "dsnow_alfa_q": "see Equation ..",
    "dsnow_rho_v": "see Equation .."}

def set_size(beamer=True, scale=None):
    """
    Set some options to use latex.

    Parameters
    ----------
    beamer : bool
        Beamer is used for bigger texts.
    scale : float
        Can be used to scale the fontsize.
    """
    if beamer:
        mpl.rcParams.update({
            "text.usetex": False,
            "font.family": "serif",
            "axes.labelsize": 20,
            "font.size": 20,
            "legend.fontsize": 16,
            "xtick.labelsize": 12,
            "ytick.labelsize": 16
        })
    else:
        mpl.rcParams.update({
            "text.usetex": False,
            "font.family": "serif",
            "axes.labelsize": 10,
            "font.size": 10,
            "legend.fontsize": 10,
            "xtick.labelsize": 8,
            "ytick.labelsize": 8
        })

def get_value(param):
    if param in in_params_value_dic:
        if isinstance(in_params_value_dic[param], str):
            return in_params_value_dic[param]
        return f"$ {in_params_value_dic[param]:1.3e} $"
    return ""

def get_unit(param, brackets=False):
    """
    Get the unit for a given parameter.

    Parameters
    ----------
    param : string
        Name of the parameter
    brackets : bool
        If true, add "[]" to output

    Returns
    -------
    string
        Unit string.
    """
    unit_dic = {
        "T": "K",
        "p": "Pa",
        "pressure": "Pa",
        "time_after_ascent": "s",
        "time": "s",
        "timestep": "s"}
    if param in unit_dic:
        if brackets:
            return "[" + unit_dic[param] + "]"
        return unit_dic[param]
    else:
        return ""
